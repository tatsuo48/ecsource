package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/olekukonko/tablewriter"
)

// Generated by https://quicktype.io

type TaskDefinition struct {
	TaskDefinition TaskDefinitionClass `json:"taskDefinition"`
}

type TaskDefinitionClass struct {
	ContainerDefinitions    []ContainerDefinition `json:"containerDefinitions"`
	CPU                     string                `json:"cpu"`
	ExecutionRoleArn        string                `json:"executionRoleArn"`
	Family                  string                `json:"family"`
	Memory                  string                `json:"memory"`
	NetworkMode             string                `json:"networkMode"`
	PlacementConstraints    []interface{}         `json:"placementConstraints"`
	RequiresCompatibilities []string              `json:"requiresCompatibilities"`
	TaskRoleArn             string                `json:"taskRoleArn"`
}

type ContainerDefinition struct {
	Image                  string                 `json:"image"`
	Name                   string                 `json:"name"`
	CPU                    int64                  `json:"cpu"`
	MemoryReservation      int64                  `json:"memoryReservation"`
	Memory                 int64                  `json:"memory"`
	Essential              bool                   `json:"essential"`
	Environment            []Environment          `json:"environment"`
	LogConfiguration       LogConfiguration       `json:"logConfiguration"`
	Secrets                []Secret               `json:"secrets"`
	Command                []string               `json:"command"`
	DockerLabels           *DockerLabels          `json:"dockerLabels,omitempty"`
	PortMappings           []PortMapping          `json:"portMappings"`
	ReadonlyRootFilesystem *bool                  `json:"readonlyRootFilesystem,omitempty"`
	StopTimeout            *int64                 `json:"stopTimeout,omitempty"`
	VolumesFrom            []interface{}          `json:"volumesFrom"`
	FirelensConfiguration  *FirelensConfiguration `json:"firelensConfiguration,omitempty"`
}

type DockerLabels struct {
	Environment string `json:"environment"`
	Service     string `json:"service"`
	App         string `json:"app"`
}

type Environment struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type FirelensConfiguration struct {
	Options FirelensConfigurationOptions `json:"options"`
	Type    string                       `json:"type"`
}

type FirelensConfigurationOptions struct {
	ConfigFileType  string `json:"config-file-type"`
	ConfigFileValue string `json:"config-file-value"`
}

type LogConfiguration struct {
	LogDriver string                   `json:"logDriver"`
	Options   *LogConfigurationOptions `json:"options,omitempty"`
}

type LogConfigurationOptions struct {
	AwslogsGroup        string `json:"awslogs-group"`
	AwslogsRegion       string `json:"awslogs-region"`
	AwslogsStreamPrefix string `json:"awslogs-stream-prefix"`
}

type PortMapping struct {
	ContainerPort int64  `json:"containerPort"`
	HostPort      int64  `json:"hostPort"`
	Protocol      string `json:"protocol"`
}

type Secret struct {
	Name      string `json:"name"`
	ValueFrom string `json:"valueFrom"`
}

func main() {
	// if not enough arguments
	if len(os.Args) < 2 {
		log.Fatal("ファイル名を指定してくだい")
	}
	filename := os.Args[1]
	// open file
	file, err := os.Open(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	// fileを読み込んでjson.Unmarshal
	var taskDefinition TaskDefinition
	if err := json.NewDecoder(file).Decode(&taskDefinition); err != nil {
		log.Fatal(err)
	}
	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"Name", "CPU", "メモリ", "メモリ予約"})
	// タスク全体のCPUとメモリ、メモリ予約を表示
	// メモリ予約の項目はタスクレベルの設定にはないので/を入れておく。
	table.Append([]string{"タスク全体(タスクレベルにメモリ予約の設定値はないのでメモリの値を流用)", taskDefinition.TaskDefinition.CPU, taskDefinition.TaskDefinition.Memory, taskDefinition.TaskDefinition.Memory})
	var allCPU int64
	var allMemory int64
	var allMemoryReservation int64
	// コンテナごとのCPUとメモリ、メモリ予約を表として表示
	for _, containerDefinition := range taskDefinition.TaskDefinition.ContainerDefinitions {
		table.Append([]string{containerDefinition.Name, fmt.Sprintf("%d", containerDefinition.CPU), fmt.Sprintf("%d", containerDefinition.Memory), fmt.Sprintf("%d", containerDefinition.MemoryReservation)})
		allCPU += containerDefinition.CPU
		allMemory += containerDefinition.Memory
		allMemoryReservation += containerDefinition.MemoryReservation
	}
	table.Append([]string{"合計指定量", fmt.Sprintf("%d", allCPU), fmt.Sprintf("%d", allMemory), fmt.Sprintf("%d", allMemoryReservation)})
	// タスク全体からコンテナごとのCPUとメモリ、メモリ予約を引いた値を表示
	taskCPU, _ := strconv.ParseInt(taskDefinition.TaskDefinition.CPU, 10, 64)
	taskMemory, _ := strconv.ParseInt(taskDefinition.TaskDefinition.Memory, 10, 64)
	table.Append([]string{"余り", fmt.Sprintf("%d", taskCPU-allCPU), fmt.Sprintf("%d", taskMemory-allMemory), fmt.Sprintf("%d", taskMemory-allMemoryReservation)})
	table.Render()
}
